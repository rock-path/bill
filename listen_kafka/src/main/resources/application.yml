server:
  port: 9500


spring:
  cloud:
    nacos:
      discovery:
        server-addr: http://192.168.158.135:8848
        namespace: 1594f901-f5d5-41f1-a21c-f0fba62ffe13
  application:
    name: kafka
  datasource:
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://192.168.158.134:3306/bill?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8&useSSL=false
      username: root
      password: psh120370
  kafka: #生产者和消费者，有哪个配哪个，没必要全配，此处是为了测试
    bootstrap-servers: 192.168.158.139:9092,192.168.158.142:9092,192.168.158.143:9092
    producer: # ⽣产者，默认为同步
      retries: 3 # 设置⼤于0的值，则客户端会将发送失败的记录重新发送
      batch-size: 16384 #一次读取16K
      buffer-memory: 33554432 #最大缓冲区32M
      acks: 1 #leader将消息写入本地log文件后返回ack
      # 指定消息key和消息体的编解码⽅式 ，序列化
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer: # 消费者，默认为同步
      group-id: tt
      enable-auto-commit: false #关闭自动提交
      auto-offset-reset: earliest #新消费组启动后从头开始消费，之后从offset偏移量开始消费
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      max-poll-records: 500 #一次最大拉取条数
    listener:
      ack-mode: MANUAL_IMMEDIATE
      # 当每⼀条记录被消费者监听器（ListenerConsumer）处理之后提交
      # RECORD
      # 当每⼀批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交
      # BATCH
      # 当每⼀批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间⼤于TIME时提交
      # TIME
      # 当每⼀批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理
      #record数量⼤于等于COUNT时提交
      # COUNT
      # TIME |　COUNT　有⼀个条件满⾜时提交
      # COUNT_TIME
      # 当每⼀批poll()的数据被消费者监听器（ListenerConsumer）处理之后, ⼿动调
      #⽤Acknowledgment.acknowledge()后提交
      # MANUAL
      # ⼿动调⽤Acknowledgment.acknowledge()后⽴即提交，⼀般使⽤这种
      # MANUAL_IMMEDIATE



#eureka:
#  instance:
#    instance-id: kafka_production
#    prefer-ip-address: true
#    #向eureka发送心跳的时间间隔，默认是30s
#    lease-renewal-interval-in-seconds: 1
#    #eureka收到服务最后一次心跳，等待服务的时间上限，默认90s
#    lease-expiration-duration-in-seconds: 2
#  client:
#    registerWithEureka: true
#    fetchRegistry: true
#    serviceUrl:
#      defaultZone: http://localhost:8760/eureka/,http://localhost:8770/eureka/
##      ,http://localhost:8780/eureka/

kafka:
  name: test
  consumer:
    group:
      name: tscm01
